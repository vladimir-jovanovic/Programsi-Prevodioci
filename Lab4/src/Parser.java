
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.ArrayList;
import SymbolTable.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\005\000\002\002\004\000\002\003" +
    "\006\000\002\004\003\000\002\011\005\000\002\011\003" +
    "\000\002\012\005\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\005\005\000\002\005\003\000\002" +
    "\006\003\000\002\006\003\000\002\014\012\000\002\033" +
    "\005\000\002\033\003\000\002\030\003\000\002\030\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\013\005\000\002\007\005\000\002\016\005\000\002" +
    "\010\005\000\002\017\005\000\002\017\003\000\002\020" +
    "\007\000\002\021\004\000\002\022\005\000\002\023\005" +
    "\000\002\023\003\000\002\024\012\000\002\025\003\000" +
    "\002\026\003\000\002\027\003\000\002\032\005\000\002" +
    "\032\005\000\002\032\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\004\004\005\001\002\000\004\002\132\001" +
    "\002\000\010\017\015\020\011\021\007\001\002\000\004" +
    "\047\130\001\002\000\004\047\ufff8\001\002\000\010\006" +
    "\ufffe\022\126\047\ufffe\001\002\000\004\047\ufff9\001\002" +
    "\000\010\006\ufffc\022\ufffc\047\ufffc\001\002\000\006\006" +
    "\023\047\017\001\002\000\004\005\016\001\002\000\004" +
    "\047\ufffa\001\002\000\004\002\001\001\002\000\004\032" +
    "\117\001\002\000\010\007\ufff4\022\ufff4\037\ufff4\001\002" +
    "\000\010\007\ufff6\022\ufff6\037\ufff6\001\002\000\010\007" +
    "\ufff5\022\ufff5\037\ufff5\001\002\000\004\034\102\001\002" +
    "\000\006\007\025\022\026\001\002\000\004\011\075\001" +
    "\002\000\006\006\023\047\017\001\002\000\004\012\030" +
    "\001\002\000\004\014\032\001\002\000\004\005\uffff\001" +
    "\002\000\004\033\041\001\002\000\006\013\036\022\035" +
    "\001\002\000\006\013\uffe6\022\uffe6\001\002\000\004\014" +
    "\032\001\002\000\004\005\uffe8\001\002\000\006\013\uffe7" +
    "\022\uffe7\001\002\000\004\024\050\001\002\000\012\044" +
    "\043\045\047\046\045\047\042\001\002\000\030\007\ufff0" +
    "\022\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\035\ufff0\037\ufff0\043\ufff0\001\002\000\030\007\uffd9" +
    "\022\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\035\uffd9\037\uffd9\043\uffd9\001\002\000\004\024\uffe4" +
    "\001\002\000\030\007\uffd7\022\uffd7\024\uffd7\025\uffd7\026" +
    "\uffd7\027\uffd7\030\uffd7\031\uffd7\035\uffd7\037\uffd7\043\uffd7" +
    "\001\002\000\030\007\uffef\022\uffef\024\uffef\025\uffef\026" +
    "\uffef\027\uffef\030\uffef\031\uffef\035\uffef\037\uffef\043\uffef" +
    "\001\002\000\030\007\uffd8\022\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\035\uffd8\037\uffd8\043\uffd8" +
    "\001\002\000\004\040\051\001\002\000\004\016\055\001" +
    "\002\000\004\015\053\001\002\000\006\013\uffe5\022\uffe5" +
    "\001\002\000\006\022\uffe1\041\uffe1\001\002\000\004\042" +
    "\062\001\002\000\006\022\057\041\060\001\002\000\004" +
    "\016\055\001\002\000\004\015\uffe3\001\002\000\006\022" +
    "\uffe2\041\uffe2\001\002\000\012\044\043\045\047\046\045" +
    "\047\042\001\002\000\004\024\uffdf\001\002\000\004\024" +
    "\065\001\002\000\012\044\043\045\047\046\045\047\042" +
    "\001\002\000\004\024\uffde\001\002\000\004\024\070\001" +
    "\002\000\012\044\043\045\047\046\045\047\042\001\002" +
    "\000\004\043\uffdd\001\002\000\004\043\073\001\002\000" +
    "\006\022\uffe0\041\uffe0\001\002\000\010\007\ufff7\022\ufff7" +
    "\037\ufff7\001\002\000\010\044\043\045\047\046\045\001" +
    "\002\000\004\010\077\001\002\000\004\012\uffea\001\002" +
    "\000\004\022\101\001\002\000\004\010\uffe9\001\002\000" +
    "\012\044\043\045\047\046\045\047\042\001\002\000\004" +
    "\035\112\001\002\000\012\025\107\026\106\027\110\035" +
    "\ufff1\001\002\000\012\044\043\045\047\046\045\047\042" +
    "\001\002\000\012\044\uffed\045\uffed\046\uffed\047\uffed\001" +
    "\002\000\012\044\uffee\045\uffee\046\uffee\047\uffee\001\002" +
    "\000\012\044\uffec\045\uffec\046\uffec\047\uffec\001\002\000" +
    "\004\035\ufff2\001\002\000\004\023\113\001\002\000\004" +
    "\036\114\001\002\000\006\006\023\047\017\001\002\000" +
    "\006\022\026\037\116\001\002\000\010\007\ufff3\022\ufff3" +
    "\037\ufff3\001\002\000\012\044\043\045\047\046\045\047" +
    "\042\001\002\000\014\007\uffda\022\uffda\030\uffda\031\uffda" +
    "\037\uffda\001\002\000\014\007\uffeb\022\uffeb\030\122\031" +
    "\123\037\uffeb\001\002\000\012\044\043\045\047\046\045" +
    "\047\042\001\002\000\012\044\043\045\047\046\045\047" +
    "\042\001\002\000\014\007\uffdb\022\uffdb\030\uffdb\031\uffdb" +
    "\037\uffdb\001\002\000\014\007\uffdc\022\uffdc\030\uffdc\031" +
    "\uffdc\037\uffdc\001\002\000\010\017\015\020\011\021\007" +
    "\001\002\000\010\006\ufffd\022\ufffd\047\ufffd\001\002\000" +
    "\004\022\131\001\002\000\010\006\ufffb\022\ufffb\047\ufffb" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\004\002\003\001\001\000\002\001\001\000" +
    "\014\003\013\004\012\011\007\012\011\031\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\023\006\020" +
    "\013\021\014\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\026\001\001\000\004\016\075\001\001\000\010" +
    "\006\073\013\021\014\017\001\001\000\004\010\030\001" +
    "\001\000\006\017\032\020\033\001\001\000\002\001\001" +
    "\000\004\021\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\030\043\034\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\051\001\001\000\006\023\055\024\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\025\063\030" +
    "\062\034\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\026\066\030\065\034\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\027\071\030\070\034\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\103\033\102\034\045\001\001\000\002" +
    "\001\001\000\004\015\104\001\001\000\006\030\110\034" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\114\006\020\013\021\014\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\117\032" +
    "\120\034\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\124\034\045\001\001\000\006\030\123\034" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\126\031\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	symbolTable = new SymbolTable();
    semanticErrors = new ArrayList<String>();
    semanticWarnings = new ArrayList<String>();

    }



    SymbolTable symbolTable;

    ArrayList<String> semanticErrors;
    ArrayList<String> semanticWarnings;

    int nodeDefCount;
    int nodeDefLimit;

    public static void main( String[] args )
    {
        try
        {
            FileReader file = new FileReader( args[0] );
            Scanner scanner = new Lexer( file );
            Parser parser = new Parser( scanner );

            parser.parse();

            parser.checkForWarnings();
            parser.printSemanticWarnings();
            parser.printSemanticErrors();
        }
        catch( Exception e )
        {
            e.printStackTrace();
        }
    }

    public void checkForWarnings(){
        SymbolNode current = symbolTable.getVariables();
        while(current != null){
            Variable var = (Variable)current;

            if(var.last_def == -1 && var.last_use == -1){
                semanticWarnings.add("warning: variable " + var.name + " is declared but it's never used");
            }

            current = current.next;
        }
    }

    public void printSemanticErrors(){
        for(String error : semanticErrors) System.out.println(error);
    }

    public void printSemanticWarnings(){
        for(String warning : semanticWarnings) System.out.println(warning);
    }

    public int getLine()
    {
        return ((Lexer) getScanner()).getLine();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Experiment ::= EXPERIMENT_BEGIN Body EXPERIMENT_END 
            {
              Object RESULT =null;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Experiment",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Experiment EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Body ::= Declarations Statements Requirements Execution 
            {
              Object RESULT =null;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declarations ::= VariableDeclaration 
            {
              Object RESULT =null;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarations",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VariableDeclaration ::= VariableDeclaration SEMICOLON Variable 
            {
              Object RESULT =null;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VariableDeclaration ::= Variable 
            {
              Object RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Variable ::= Type ID SEMICOLON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if(!symbolTable.addVar(id, t)){
        semanticErrors.add("error line " + parser.getLine() + ": " + id + " already declared!");
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Type ::= INT 
            {
              Type RESULT =null;
		
    RESULT = symbolTable.getType("integer");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= DOUBLE 
            {
              Type RESULT =null;
		
        RESULT = symbolTable.getType("double");
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= STRING 
            {
              Type RESULT =null;
		
        RESULT = symbolTable.getType("string");
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statements ::= Statements SEMICOLON Statement 
            {
              Object RESULT =null;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statements ::= Statement 
            {
              Object RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statement ::= Assignment 
            {
              Object RESULT =null;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= IfStatement 
            {
              Object RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IfStatement ::= IF OPEN_ROUND_BRACKETS RelExpression CLOSE_ROUND_BRACKETS COLON OPEN_CURLY_BRACKETS Statements CLOSE_CURLY_BRACKETS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Type e = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStatement",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // RelExpression ::= Term RelOp Term 
            {
              Type RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t2 = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(t1.tkind != Type.INTEGER || t2.tkind != Type.INTEGER){
        semanticErrors.add("error line " + parser.getLine() + ": rel expressions can contain only \'int\' types!");
        RESULT = symbolTable.getType("unknown");
    }
    else{
        RESULT = symbolTable.getType("integer");
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelExpression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // RelExpression ::= Term 
            {
              Type RESULT =null;
		
        RESULT = symbolTable.getType("integer");
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelExpression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Term ::= ID 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Variable var = symbolTable.getVar(id);
    if(var == null){
        semanticErrors.add("error line " + parser.getLine() + ": " + id + " not declared!");
        RESULT = symbolTable.getType("unknown");
    }
    else if(var.last_def == -1){
        semanticErrors.add("error line " + parser.getLine() + ": " + id + " not initialized!");
        RESULT = symbolTable.getType("unknown");
    }
    else{
        RESULT = var.type;
    }
    var.last_use = parser.getLine();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Term ::= Const 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = c.type;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // RelOp ::= LT 
            {
              Object RESULT =null;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // RelOp ::= EQ 
            {
              Object RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // RelOp ::= GT 
            {
              Object RESULT =null;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Assignment ::= ID ASSIGN Expression 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type e = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Variable var = symbolTable.getVar(id);
    if(var == null){
        semanticErrors.add("error line " + parser.getLine() + ": " + id + " not declared!");
    }
    else{
        if(var.type.tkind != e.tkind){
            semanticErrors.add("error line " + parser.getLine() + ": assignment type mismatch!");
        }
        else{
            var.last_def = parser.getLine();       
        }
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignment",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Requirements ::= REQUIREMENTS_BEGIN NodeNumber REQUIREMENTS_END 
            {
              Object RESULT =null;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Requirements",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NodeNumber ::= NODES Const SEMICOLON 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    if(c.type.tkind != Type.INTEGER){
        semanticErrors.add("line " + parser.getLine() + ": " + "number of node elements must be const of type \'int\'");
    }
    else{
        nodeDefLimit = (int)c.value;
        nodeDefCount = 0;
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NodeNumber",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Execution ::= EXECUTION_BEGIN NodeList EXECUTION_END 
            {
              Object RESULT =null;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Execution",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NodeList ::= NodeList SEMICOLON NodeDef 
            {
              Object RESULT =null;
		
    if(nodeDefCount > nodeDefLimit){
        semanticErrors.add("error line " + parser.getLine() + ": " + "number of node definitions must be less than or equal to " + nodeDefLimit + "!");
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NodeList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NodeList ::= NodeDef 
            {
              Object RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NodeList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NodeDef ::= NODE_BEGIN NodeName COMMA Route NODE_END 
            {
              Object RESULT =null;
		
    nodeDefCount++;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NodeDef",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NodeName ::= NAME Term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(t.tkind != Type.UNKNOWN && t.tkind != Type.STRING){
        semanticErrors.add("error line " + parser.getLine() + ": " + "name of a node must be type \'string\'");
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NodeName",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Route ::= OPEN_SQUARE_BRACKETS Waypoints CLOSE_SQUARE_BRACKETS 
            {
              Object RESULT =null;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Route",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Waypoints ::= Waypoints SEMICOLON Waypoint 
            {
              Object RESULT =null;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Waypoints",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Waypoints ::= Waypoint 
            {
              Object RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Waypoints",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Waypoint ::= WP OPEN_ANGLE_BRACKETS X COMMA Y COMMA Z CLOSE_ANGLE_BRACKETS 
            {
              Object RESULT =null;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Waypoint",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // X ::= Term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(t.tkind != Type.UNKNOWN && t.tkind != Type.INTEGER && t.tkind != Type.DOUBLE){
        semanticErrors.add("error line " + parser.getLine() + ": " + "waypoint coordinate must be \'int\' or \'double\'");
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Y ::= Term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(t.tkind != Type.UNKNOWN && t.tkind != Type.INTEGER && t.tkind != Type.DOUBLE){
        semanticErrors.add("error line " + parser.getLine() + ": " + "waypoint coordinate must be \'int\' or \'double\'");
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Y",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Z ::= Term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(t.tkind != Type.UNKNOWN && t.tkind != Type.INTEGER && t.tkind != Type.DOUBLE){
        semanticErrors.add("error line " + parser.getLine() + ": " + "waypoint coordinate must be \'int\' or \'double\'");
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Z",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= Expression PLUS Term 
            {
              Type RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type e = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(e.tkind == Type.STRING || t.tkind == Type.STRING){
        semanticErrors.add("error line " + parser.getLine() + ": " + "addition with type \'string\' is not allowed");
        RESULT = symbolTable.getType("unknown");
    }
    else{
            if(e.tkind == Type.DOUBLE && t.tkind == Type.DOUBLE){
                RESULT = symbolTable.getType("double");
            }
            else if (e.tkind == Type.INTEGER && t.tkind == Type.INTEGER){
                RESULT = symbolTable.getType("integer");
            }
            else{
                semanticWarnings.add("warning line " + parser.getLine() + ": " + "implicit cast to double");
                RESULT = symbolTable.getType("double");
            }
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= Expression MULTIPLY Term 
            {
              Type RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type e = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        if(e.tkind == Type.STRING || t.tkind == Type.STRING){
            semanticErrors.add("error line " + parser.getLine() + ": " + "multiplication with type \'string\' is not allowed");
            RESULT = symbolTable.getType("unknown");
        }
        {
            if(e.tkind == Type.DOUBLE && t.tkind == Type.DOUBLE){
                RESULT = symbolTable.getType("double");
            }
            else if (e.tkind == Type.INTEGER && t.tkind == Type.INTEGER){
                RESULT = symbolTable.getType("integer");
            }
            else{
                semanticWarnings.add("warning line " + parser.getLine() + ": " + "implicit cast to double!");
                RESULT = symbolTable.getType("double");
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= Term 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = t;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Const ::= INTCONST 
            {
              Constant RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
   RESULT = new Constant(symbolTable.getType("integer"), c);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Const ::= DCONST 
            {
              Constant RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       RESULT = new Constant(symbolTable.getType("double"), c);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Const ::= STRCONST 
            {
              Constant RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       RESULT = new Constant(symbolTable.getType("string"), c);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
