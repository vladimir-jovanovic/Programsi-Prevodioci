
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MPParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\005\000\002\002\004\000\002\003" +
    "\006\000\002\004\003\000\002\011\005\000\002\011\003" +
    "\000\002\012\005\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\005\005\000\002\005\003\000\002" +
    "\006\003\000\002\006\003\000\002\015\012\000\002\016" +
    "\005\000\002\016\003\000\002\017\003\000\002\017\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\014\005\000\002\007\005\000\002\022\005\000\002" +
    "\010\005\000\002\023\005\000\002\023\003\000\002\024" +
    "\007\000\002\025\004\000\002\026\005\000\002\027\005" +
    "\000\002\027\003\000\002\030\012\000\002\031\003\000" +
    "\002\032\003\000\002\033\003\000\002\021\005\000\002" +
    "\021\005\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\004\004\005\001\002\000\004\002\127\001" +
    "\002\000\010\021\015\022\011\023\007\001\002\000\004" +
    "\017\125\001\002\000\004\017\ufff8\001\002\000\010\006" +
    "\ufffe\017\ufffe\024\123\001\002\000\004\017\ufff9\001\002" +
    "\000\010\006\ufffc\017\ufffc\024\ufffc\001\002\000\006\006" +
    "\023\017\017\001\002\000\004\005\016\001\002\000\004" +
    "\017\ufffa\001\002\000\004\002\001\001\002\000\004\034" +
    "\114\001\002\000\010\007\ufff4\024\ufff4\041\ufff4\001\002" +
    "\000\010\007\ufff6\024\ufff6\041\ufff6\001\002\000\010\007" +
    "\ufff5\024\ufff5\041\ufff5\001\002\000\004\036\077\001\002" +
    "\000\006\007\025\024\026\001\002\000\004\011\072\001" +
    "\002\000\006\006\023\017\017\001\002\000\004\012\030" +
    "\001\002\000\004\014\032\001\002\000\004\005\uffff\001" +
    "\002\000\004\035\041\001\002\000\006\013\036\024\035" +
    "\001\002\000\006\013\uffe6\024\uffe6\001\002\000\004\014" +
    "\032\001\002\000\004\005\uffe8\001\002\000\006\013\uffe7" +
    "\024\uffe7\001\002\000\004\026\043\001\002\000\004\017" +
    "\042\001\002\000\004\026\uffe4\001\002\000\004\042\044" +
    "\001\002\000\004\016\050\001\002\000\004\015\046\001" +
    "\002\000\006\013\uffe5\024\uffe5\001\002\000\006\024\uffe1" +
    "\043\uffe1\001\002\000\004\044\055\001\002\000\006\024" +
    "\052\043\053\001\002\000\004\016\050\001\002\000\004" +
    "\015\uffe3\001\002\000\006\024\uffe2\043\uffe2\001\002\000" +
    "\006\017\056\020\057\001\002\000\030\007\ufff0\024\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\037" +
    "\ufff0\041\ufff0\045\ufff0\001\002\000\030\007\uffef\024\uffef" +
    "\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\037" +
    "\uffef\041\uffef\045\uffef\001\002\000\004\026\uffdf\001\002" +
    "\000\004\026\062\001\002\000\006\017\056\020\057\001" +
    "\002\000\004\026\uffde\001\002\000\004\026\065\001\002" +
    "\000\006\017\056\020\057\001\002\000\004\045\uffdd\001" +
    "\002\000\004\045\070\001\002\000\006\024\uffe0\043\uffe0" +
    "\001\002\000\010\007\ufff7\024\ufff7\041\ufff7\001\002\000" +
    "\004\020\075\001\002\000\004\010\074\001\002\000\004" +
    "\012\uffea\001\002\000\004\024\076\001\002\000\004\010" +
    "\uffe9\001\002\000\006\017\056\020\057\001\002\000\004" +
    "\037\107\001\002\000\012\027\104\030\103\031\105\037" +
    "\ufff1\001\002\000\006\017\056\020\057\001\002\000\006" +
    "\017\uffed\020\uffed\001\002\000\006\017\uffee\020\uffee\001" +
    "\002\000\006\017\uffec\020\uffec\001\002\000\004\037\ufff2" +
    "\001\002\000\004\025\110\001\002\000\004\040\111\001" +
    "\002\000\006\006\023\017\017\001\002\000\006\024\026" +
    "\041\113\001\002\000\010\007\ufff3\024\ufff3\041\ufff3\001" +
    "\002\000\006\017\056\020\057\001\002\000\014\007\uffda" +
    "\024\uffda\032\uffda\033\uffda\041\uffda\001\002\000\014\007" +
    "\uffeb\024\uffeb\032\117\033\120\041\uffeb\001\002\000\006" +
    "\017\056\020\057\001\002\000\006\017\056\020\057\001" +
    "\002\000\014\007\uffdb\024\uffdb\032\uffdb\033\uffdb\041\uffdb" +
    "\001\002\000\014\007\uffdc\024\uffdc\032\uffdc\033\uffdc\041" +
    "\uffdc\001\002\000\010\021\015\022\011\023\007\001\002" +
    "\000\010\006\ufffd\017\ufffd\024\ufffd\001\002\000\004\024" +
    "\126\001\002\000\010\006\ufffb\017\ufffb\024\ufffb\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\004\002\003\001\001\000\002\001\001\000" +
    "\014\003\013\004\012\011\007\012\011\013\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\023\006\020" +
    "\014\021\015\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\026\001\001\000\004\022\072\001\001\000\010" +
    "\006\070\014\021\015\017\001\001\000\004\010\030\001" +
    "\001\000\006\023\032\024\033\001\001\000\002\001\001" +
    "\000\004\025\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\044\001\001\000\006\027\050\030\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\057\031\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\062\032" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\065\033\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\077\017\100\001\001\000\002" +
    "\001\001\000\004\020\101\001\001\000\004\017\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\111\006\020\014\021\015\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\114\021\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\121" +
    "\001\001\000\004\017\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\123\013\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   public static void main( String[] args )
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   Symbol syntaxTree = parser.parse();
           System.out.println(syntaxTree);
	  }
	  catch( Exception e )
	  {
		   e.printStackTrace();
	  }
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action_part00000000(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Experiment ::= EXPERIMENT_BEGIN Body EXPERIMENT_END 
            {
              Object RESULT =null;
		
    System.out.println("Experiment -> experiment Body ~experiment");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Experiment",0, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Experiment EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Body ::= Declarations Statements Requirements Execution 
            {
              Object RESULT =null;
		
    System.out.println("Body -> Declarations Statements Requirements Execution");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Body",1, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declarations ::= VariableDeclaration 
            {
              Object RESULT =null;
		
    System.out.println("Declarations -> VariableDeclaration");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Declarations",2, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VariableDeclaration ::= VariableDeclaration SEMICOLON Variable 
            {
              Object RESULT =null;
		
    System.out.println("VariableDeclaration -> VariableDeclaration ; Variable");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",7, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VariableDeclaration ::= Variable 
            {
              Object RESULT =null;
		
        System.out.println("VariableDeclaration -> Variable");
        
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",7, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Variable ::= Type ID SEMICOLON 
            {
              Object RESULT =null;
		
    System.out.println("Variable -> Type ID ;");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Variable",8, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Type ::= INT 
            {
              Object RESULT =null;
		
    System.out.println("Type -> int");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= DOUBLE 
            {
              Object RESULT =null;
		
        System.out.println("Type -> double");
        
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= STRING 
            {
              Object RESULT =null;
		
        System.out.println("Type -> string");
        
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statements ::= Statements SEMICOLON Statement 
            {
              Object RESULT =null;
		
    System.out.println("Statements -> Statements ; Statement");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statements",3, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statements ::= Statement 
            {
              Object RESULT =null;
		
        System.out.println("Statements -> Statement");
        
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statements",3, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statement ::= Assignment 
            {
              Object RESULT =null;
		
    System.out.println("Statement -> Assignment");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",4, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= IfStatement 
            {
              Object RESULT =null;
		
        System.out.println("Statement -> Assignment");
        
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Statement",4, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IfStatement ::= IF OPEN_ROUND_BRACKETS RelExpression CLOSE_ROUND_BRACKETS COLON OPEN_CURLY_BRACKETS Statements CLOSE_CURLY_BRACKETS 
            {
              Object RESULT =null;
		
    System.out.println("IfStatement -> if \\(RelExpression\\) : {Statements}");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("IfStatement",11, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-7)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // RelExpression ::= Term RelOp Term 
            {
              Object RESULT =null;
		
    System.out.println("RelExpression -> Term RelOp Term");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelExpression",12, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // RelExpression ::= Term 
            {
              Object RESULT =null;
		
        System.out.println("RelExpression -> Term");
        
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelExpression",12, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Term ::= ID 
            {
              Object RESULT =null;
		
    System.out.println("Term -> ID");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Term",13, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Term ::= CONST 
            {
              Object RESULT =null;
		
        System.out.println("Term -> CONST");
        
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Term",13, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // RelOp ::= LT 
            {
              Object RESULT =null;
		
    System.out.println("RelOp -> lt");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelOp",14, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // RelOp ::= EQ 
            {
              Object RESULT =null;
		
        System.out.println("RelOp -> eq");
        
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelOp",14, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // RelOp ::= GT 
            {
              Object RESULT =null;
		
        System.out.println("RelOp -> gt");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("RelOp",14, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Assignment ::= ID ASSIGN Expression 
            {
              Object RESULT =null;
		
    System.out.println("Assignment -> ID = Expression");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Assignment",10, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Requirements ::= REQUIREMENTS_BEGIN NodeNumber REQUIREMENTS_END 
            {
              Object RESULT =null;
		
    System.out.println("Requirements -> requirements nodeNumber ~requirements");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Requirements",5, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NodeNumber ::= NODES CONST SEMICOLON 
            {
              Object RESULT =null;
		
    System.out.println("NodeNumber -> nodes CONST;");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("NodeNumber",16, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Execution ::= EXECUTION_BEGIN NodeList EXECUTION_END 
            {
              Object RESULT =null;
		
    System.out.println("Execution -> execution NodeList ~execution");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Execution",6, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NodeList ::= NodeList SEMICOLON NodeDef 
            {
              Object RESULT =null;
		
    System.out.println("NodeList -> NodeList ; NodeDef");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("NodeList",17, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NodeList ::= NodeDef 
            {
              Object RESULT =null;
		
        System.out.println("NodeList -> NodeDef");
        
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("NodeList",17, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NodeDef ::= NODE_BEGIN NodeName COMMA Route NODE_END 
            {
              Object RESULT =null;
		
    System.out.println("NodeDef -> node NodeName, Route ~node");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("NodeDef",18, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NodeName ::= NAME ID 
            {
              Object RESULT =null;
		
    System.out.println("NodeName -> name ID");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("NodeName",19, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Route ::= OPEN_SQUARE_BRACKETS Waypoints CLOSE_SQUARE_BRACKETS 
            {
              Object RESULT =null;
		
    System.out.println("Route -> [Waypoints]");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Route",20, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Waypoints ::= Waypoints SEMICOLON Waypoint 
            {
              Object RESULT =null;
		
    System.out.println("Waypoints -> Waypoints ; Waypoint");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Waypoints",21, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Waypoints ::= Waypoint 
            {
              Object RESULT =null;
		
        System.out.println("Waypoints -> Waypoint");
        
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Waypoints",21, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Waypoint ::= WP OPEN_ANGLE_BRACKETS X COMMA Y COMMA Z CLOSE_ANGLE_BRACKETS 
            {
              Object RESULT =null;
		
    System.out.println("Waypoint -> WP<X, Y, Z>");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Waypoint",22, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-7)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // X ::= Term 
            {
              Object RESULT =null;
		
    System.out.println("X -> Term");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("X",23, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Y ::= Term 
            {
              Object RESULT =null;
		
    System.out.println("Y -> Term");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Y",24, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Z ::= Term 
            {
              Object RESULT =null;
		
    System.out.println("Z -> Term");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Z",25, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= Expression PLUS Term 
            {
              Object RESULT =null;
		
    System.out.println("Expression -> Expression + Term");
    
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= Expression MULTIPLY Term 
            {
              Object RESULT =null;
		
        System.out.println("Expression -> Expression * Term");
        
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= Term 
            {
              Object RESULT =null;
		
        System.out.println("Expression -> Term");
        
              CUP$MPParser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MPParser$stack.peek()), RESULT);
            }
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MPParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
              return CUP$MPParser$do_action_part00000000(
                               CUP$MPParser$act_num,
                               CUP$MPParser$parser,
                               CUP$MPParser$stack,
                               CUP$MPParser$top);
    }
}

}
