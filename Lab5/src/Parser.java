
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.ArrayList;
import SymbolTable.*;
import AST.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\015\005\000\002\002\004\000\002\002" +
    "\006\000\002\016\003\000\002\012\005\000\002\012\003" +
    "\000\002\013\005\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\003\005\000\002\003\003\000\002" +
    "\004\003\000\002\004\003\000\002\006\016\000\002\010" +
    "\005\000\002\010\003\000\002\011\003\000\002\011\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\005\005\000\002\017\005\000\002\022\005\000\002" +
    "\020\005\000\002\023\005\000\002\023\003\000\002\021" +
    "\007\000\002\024\004\000\002\025\005\000\002\026\005" +
    "\000\002\026\003\000\002\027\012\000\002\030\003\000" +
    "\002\031\003\000\002\032\003\000\002\007\005\000\002" +
    "\007\005\000\002\007\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\004\004\005\001\002\000\004\002\136\001" +
    "\002\000\010\020\015\021\011\022\007\001\002\000\004" +
    "\050\134\001\002\000\004\050\ufff8\001\002\000\010\006" +
    "\ufffe\023\132\050\ufffe\001\002\000\004\050\ufff9\001\002" +
    "\000\010\006\ufffc\023\ufffc\050\ufffc\001\002\000\006\006" +
    "\023\050\017\001\002\000\004\005\016\001\002\000\004" +
    "\050\ufffa\001\002\000\004\002\001\001\002\000\004\033" +
    "\123\001\002\000\010\010\ufff4\023\ufff4\040\ufff4\001\002" +
    "\000\010\010\ufff6\023\ufff6\040\ufff6\001\002\000\010\010" +
    "\ufff5\023\ufff5\040\ufff5\001\002\000\004\035\102\001\002" +
    "\000\006\010\025\023\026\001\002\000\004\012\075\001" +
    "\002\000\006\006\023\050\017\001\002\000\004\013\030" +
    "\001\002\000\004\015\032\001\002\000\004\005\uffff\001" +
    "\002\000\004\034\041\001\002\000\006\014\036\023\035" +
    "\001\002\000\006\014\uffe6\023\uffe6\001\002\000\004\015" +
    "\032\001\002\000\004\005\uffe8\001\002\000\006\014\uffe7" +
    "\023\uffe7\001\002\000\004\025\050\001\002\000\012\045" +
    "\043\046\047\047\045\050\042\001\002\000\030\010\ufff0" +
    "\023\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032" +
    "\ufff0\036\ufff0\040\ufff0\044\ufff0\001\002\000\030\010\uffd9" +
    "\023\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\036\uffd9\040\uffd9\044\uffd9\001\002\000\004\025\uffe4" +
    "\001\002\000\030\010\uffd7\023\uffd7\025\uffd7\026\uffd7\027" +
    "\uffd7\030\uffd7\031\uffd7\032\uffd7\036\uffd7\040\uffd7\044\uffd7" +
    "\001\002\000\030\010\uffef\023\uffef\025\uffef\026\uffef\027" +
    "\uffef\030\uffef\031\uffef\032\uffef\036\uffef\040\uffef\044\uffef" +
    "\001\002\000\030\010\uffd8\023\uffd8\025\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\036\uffd8\040\uffd8\044\uffd8" +
    "\001\002\000\004\041\051\001\002\000\004\017\055\001" +
    "\002\000\004\016\053\001\002\000\006\014\uffe5\023\uffe5" +
    "\001\002\000\006\023\uffe1\042\uffe1\001\002\000\004\043" +
    "\062\001\002\000\006\023\057\042\060\001\002\000\004" +
    "\017\055\001\002\000\004\016\uffe3\001\002\000\006\023" +
    "\uffe2\042\uffe2\001\002\000\012\045\043\046\047\047\045" +
    "\050\042\001\002\000\004\025\uffdf\001\002\000\004\025" +
    "\065\001\002\000\012\045\043\046\047\047\045\050\042" +
    "\001\002\000\004\025\uffde\001\002\000\004\025\070\001" +
    "\002\000\012\045\043\046\047\047\045\050\042\001\002" +
    "\000\004\044\uffdd\001\002\000\004\044\073\001\002\000" +
    "\006\023\uffe0\042\uffe0\001\002\000\010\010\ufff7\023\ufff7" +
    "\040\ufff7\001\002\000\010\045\043\046\047\047\045\001" +
    "\002\000\004\011\077\001\002\000\004\013\uffea\001\002" +
    "\000\004\023\101\001\002\000\004\011\uffe9\001\002\000" +
    "\012\045\043\046\047\047\045\050\042\001\002\000\004" +
    "\036\112\001\002\000\012\026\107\027\106\030\110\036" +
    "\ufff1\001\002\000\012\045\043\046\047\047\045\050\042" +
    "\001\002\000\012\045\uffed\046\uffed\047\uffed\050\uffed\001" +
    "\002\000\012\045\uffee\046\uffee\047\uffee\050\uffee\001\002" +
    "\000\012\045\uffec\046\uffec\047\uffec\050\uffec\001\002\000" +
    "\004\036\ufff2\001\002\000\004\024\113\001\002\000\004" +
    "\037\114\001\002\000\006\006\023\050\017\001\002\000" +
    "\006\023\026\040\116\001\002\000\004\007\117\001\002" +
    "\000\004\037\120\001\002\000\006\006\023\050\017\001" +
    "\002\000\006\023\026\040\122\001\002\000\010\010\ufff3" +
    "\023\ufff3\040\ufff3\001\002\000\012\045\043\046\047\047" +
    "\045\050\042\001\002\000\014\010\uffda\023\uffda\031\uffda" +
    "\032\uffda\040\uffda\001\002\000\014\010\uffeb\023\uffeb\031" +
    "\126\032\127\040\uffeb\001\002\000\012\045\043\046\047" +
    "\047\045\050\042\001\002\000\012\045\043\046\047\047" +
    "\045\050\042\001\002\000\014\010\uffdb\023\uffdb\031\uffdb" +
    "\032\uffdb\040\uffdb\001\002\000\014\010\uffdc\023\uffdc\031" +
    "\uffdc\032\127\040\uffdc\001\002\000\010\020\015\021\011" +
    "\022\007\001\002\000\010\006\ufffd\023\ufffd\050\ufffd\001" +
    "\002\000\004\023\135\001\002\000\010\006\ufffb\023\ufffb" +
    "\050\ufffb\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\004\015\003\001\001\000\002\001\001\000" +
    "\014\002\013\012\007\013\011\016\012\033\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\023\004\020" +
    "\005\021\006\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\026\001\001\000\004\022\075\001\001\000\010" +
    "\004\073\005\021\006\017\001\001\000\004\020\030\001" +
    "\001\000\006\021\033\023\032\001\001\000\002\001\001" +
    "\000\004\024\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\043\034\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\051\001\001\000\006\026\055\027\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\062\030" +
    "\063\034\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\065\031\066\034\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\070\032\071\034\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\102\011\103\034\045\001\001\000\002" +
    "\001\001\000\004\014\104\001\001\000\006\011\110\034" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\114\004\020\005\021\006\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\120\004\020\005\021\006\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\124\011\123\034" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\130\011\123\034\045\001\001\000\010\007\127\011" +
    "\123\034\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\132\033\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	symbolTable = new SymbolTable();

    }



    SymbolTable symbolTable;

    enum RelOp {
        LT,
        EQ,
        GT
    }

    public static void main( String[] args )
    {
        try
        {
            FileReader file = new FileReader( args[0] );
            Scanner scanner = new Lexer( file );
            Parser parser = new Parser( scanner );
            ASTNode ast = (ASTNode)parser.parse().value;

            String outputFilename = args[0].substring(0, args[0].length() - 3) + "ic";

            BufferedWriter writer = new BufferedWriter(new FileWriter(outputFilename));
            ast.translate(writer);
            writer.close();

        }
        catch( Exception e )
        {
            e.printStackTrace();
        }
    }

    public int getLine()
    {
        return ((Lexer) getScanner()).getLine();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Experiment ::= EXPERIMENT_BEGIN Body EXPERIMENT_END 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = b;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Experiment",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Experiment EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Body ::= Declarations Statements Requirements Execution 
            {
              Block RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Block ss = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
    RESULT = ss;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Declarations ::= VariableDeclaration 
            {
              Object RESULT =null;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarations",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VariableDeclaration ::= VariableDeclaration SEMICOLON Variable 
            {
              Object RESULT =null;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VariableDeclaration ::= Variable 
            {
              Object RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Variable ::= Type ID SEMICOLON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    symbolTable.addVar(id, t);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Variable",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Type ::= INT 
            {
              Type RESULT =null;
		
    RESULT = symbolTable.getType("integer");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= DOUBLE 
            {
              Type RESULT =null;
		
        RESULT = symbolTable.getType("double");
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= STRING 
            {
              Type RESULT =null;
		
        RESULT = symbolTable.getType("string");
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statements ::= Statements SEMICOLON Statement 
            {
              Block RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Block ss = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = ss;
    RESULT.addStatement(s);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statements ::= Statement 
            {
              Block RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new Block();
        RESULT.addStatement(s);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statement ::= Assignment 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = a;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= IfStatement 
            {
              Statement RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IfStatement is = (IfStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = is;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IfStatement ::= IF OPEN_ROUND_BRACKETS RelExpression CLOSE_ROUND_BRACKETS COLON OPEN_CURLY_BRACKETS Statements CLOSE_CURLY_BRACKETS ELSE OPEN_CURLY_BRACKETS Statements CLOSE_CURLY_BRACKETS 
            {
              IfStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Block t = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Block el = (Block)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    RESULT = new IfStatement(e, t, el);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStatement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // RelExpression ::= Term RelOp Term 
            {
              Expression RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression t1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		RelOp o = (RelOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression t2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    if(o == RelOp.LT)
        RESULT = new Lt(t1, t2);
    else if(o == RelOp.EQ)
        RESULT = new Eq(t1, t2);
    else if(o == RelOp.GT)
        RESULT = new Gt(t1, t2);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelExpression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // RelExpression ::= Term 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = t;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelExpression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Term ::= ID 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Variable var = symbolTable.getVar(id);
    RESULT = new VariableExpression(var);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Term ::= Const 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new ConstantExpression(c);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Term",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // RelOp ::= LT 
            {
              RelOp RESULT =null;
		
    RESULT = RelOp.LT;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // RelOp ::= EQ 
            {
              RelOp RESULT =null;
		
        RESULT = RelOp.EQ;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // RelOp ::= GT 
            {
              RelOp RESULT =null;
		
        RESULT = RelOp.GT;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelOp",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Assignment ::= ID ASSIGN Expression 
            {
              Assignment RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    Variable var = symbolTable.getVar(id);
    RESULT = new Assignment(var, e);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignment",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Requirements ::= REQUIREMENTS_BEGIN NodeNumber REQUIREMENTS_END 
            {
              Object RESULT =null;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Requirements",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NodeNumber ::= NODES Const SEMICOLON 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NodeNumber",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Execution ::= EXECUTION_BEGIN NodeList EXECUTION_END 
            {
              Object RESULT =null;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Execution",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NodeList ::= NodeList SEMICOLON NodeDef 
            {
              Object RESULT =null;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NodeList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NodeList ::= NodeDef 
            {
              Object RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NodeList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NodeDef ::= NODE_BEGIN NodeName COMMA Route NODE_END 
            {
              Object RESULT =null;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NodeDef",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NodeName ::= NAME Term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NodeName",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Route ::= OPEN_SQUARE_BRACKETS Waypoints CLOSE_SQUARE_BRACKETS 
            {
              Object RESULT =null;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Route",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Waypoints ::= Waypoints SEMICOLON Waypoint 
            {
              Object RESULT =null;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Waypoints",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Waypoints ::= Waypoint 
            {
              Object RESULT =null;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Waypoints",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Waypoint ::= WP OPEN_ANGLE_BRACKETS X COMMA Y COMMA Z CLOSE_ANGLE_BRACKETS 
            {
              Object RESULT =null;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Waypoint",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // X ::= Term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("X",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Y ::= Term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Y",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Z ::= Term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Z",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= Expression PLUS Expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = new Sum(e, t);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= Expression MULTIPLY Expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new Product(e, t);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= Term 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression t = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = t;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Const ::= INTCONST 
            {
              Constant RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
   RESULT = new Constant(symbolTable.getType("integer"), c);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Const ::= DCONST 
            {
              Constant RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       RESULT = new Constant(symbolTable.getType("double"), c);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Const ::= STRCONST 
            {
              Constant RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       RESULT = new Constant(symbolTable.getType("string"), c);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
